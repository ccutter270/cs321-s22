1 + 1
1 + 1
1 + 1
1 + 1
1 + 1 + 1
------------------ NOTES ---------------------------
#  - Can make keyboard shortcuts under tools (command + enter is run)
#  - Can ru
clear
# --------------------------- NOTES ---------------------------
#  - Can make keyboard shortcuts under tools (command + enter is run)
#  - Can run something by just highlighting it, also runs where cursor is
clear
1 + 1
c(1,4,8)
1 + 1
mean(vector1)
vector1 = c(1,4,8)      # Stores value in vector1
mean(x = vector1) #use x = vector1 to say the argument x is equal to vector 1
c(1,4,8)                # This will make a vector of 1 4 8 together
mean(x = vector1) #use x = vector1 to say the argument x is equal to vector 1
mean(vector1)     # We don't need to label argumets as long as they are in order
mean(x = student.sleep, na.rm = TRUE)  # Optional argument to avoid NA numbers
student.sleep <- c(1, 4, 8, NA)
mean(x = student.sleep, na.rm = TRUE)  # Optional argument to avoid NA numbers
student.sleep <- c(1, 4, 8, NA)
mean(x = student.sleep)   # this outputs NA! Can't add NA
mean(x = student.sleep, na.rm = TRUE)  # Optional argument to avoid NA numbers
? mean()
hello
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
View(diamonds)
ggplot(data = diamods)
diamonds
ggplot(data = diamods)
ggplot(data = diamonds)
ggplot(data = diamond) +                  # Make canvas
geom_point(aes(x = carat, y = price))   # Make plot graph with x and y
ggplot(data = diamonds) +                  # Make canvas
geom_point(aes(x = carat, y = price))   # Make plot graph with x and y
ggplot(data = diamonds) +                  # Make canvas
geom_point(aes(x = carat, y = price))    # Make plot graph with x and y
library("ggplot2")     # makes pretty graphs rather than base R which is ugly
library("ggplot2")     # makes pretty graphs rather than base R which is ugly
ggplot(data = diamonds) +                  # Make canvas
geom_point(aes(x = carat, y = price))    # Make plot graph with x and y
ggplot(data = diamonds) +                  # Make canvas
geom_point(aes(x = carat, y = price))    # Make plot graph with x and y
ggplot(data = diamonds) +                    # Make canvas
geom_point(aes(x = carat, y = price)) +    # Make plot graph with x and y
theme_dark()                               # Spice it up a bit
ggplot(data = diamonds) +                    # Make canvas
geom_point(aes(x = carat, y = price)) +    # Make plot graph with x and y
theme_dark()                               # Spice it up a bit
ggplot(data = diamonds) +                         # Make canvas
geom_point(mapping = aes(x = carat, y = price), # Make plot graph with x and y
color = "blue",                      # Can color points
size = 4) +                          # Can change size of points
theme_dark()                                    # Spice it up a bit
shiny::runApp('Desktop/Final Project/final')
runApp('Desktop/Final Project/final')
?tabsetPanel
runApp('Desktop/Final Project/final')
runApp('Desktop/final')
runApp('Desktop/final')
install.packages('shinydashboard')
library(shinydashboard)
runApp('Desktop/final')
?menuItem
?sidebarMenu
runApp('Desktop/final')
runApp('Desktop/Final Project/final')
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_point(color = "black") +
geom_smooth(method = "loess", se = F, color = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000))
library("ggplot2")                                   # ggplot2 library
library("tidyverse")                                 # tidyverse library
library("gridExtra")                                 # gridExtra library
library("dplyr")
setwd("~/Desktop/Final Project")
data <- read_csv("Repeated K-Mer Data.csv")                    # data file
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
#geom_smooth(method = "loess", se = F, color = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000))
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
#geom_smooth(method = "loess", se = F, color = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000)) +
ggtitle("Number of Repeated Sequences of Length K")
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
#geom_smooth(method = "loess", se = F, color = "darkviolet") +
theme_bw(plot.title = element_text(hjust = 0.5)) +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000)) +
ggtitle("Number of Repeated Sequences of Length K")
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000)) +
ggtitle("Number of Repeated Sequences of Length K")
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000)) +
labs(title = "Number of Repeated Sequences of Length K" )
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000)) +
labs(title = "Number of Repeated Sequences of Length K" )
data %>%
ggplot(aes(x = K, y = Repeats)) +
geom_col(color = "darkviolet", fill = "darkviolet") +
theme_bw() +
scale_x_continuous(breaks=c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) +
scale_y_continuous(limits = c(0, 5000)) +
labs(title = "Number of Repeated Sequences of Length K" ) +
theme(plot.title=element_text(hjust=0.5))
